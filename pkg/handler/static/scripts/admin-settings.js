// Generated by CoffeeScript 1.7.1
(function() {
  var AdminSettings, PasswordChanger, ServerSettings;

  if (window.goule == null) {
    window.goule = {};
  }

  AdminSettings = (function() {
    function AdminSettings() {
      this.serverSettings = new ServerSettings();
      this.passwordChanger = new PasswordChanger();
      $('#as-container input').on('input', (function(_this) {
        return function() {
          return _this.inputChanged();
        };
      })(this));
      $('#as-container input').change((function(_this) {
        return function() {
          return _this.inputChanged();
        };
      })(this));
    }

    AdminSettings.prototype.show = function(animate) {
      var container;
      this.serverSettings.disable();
      window.goule.api.getConfig((function(_this) {
        return function(err, config) {
          if (err == null) {
            _this.serverSettings.update(config);
            return _this.serverSettings.enable();
          }
        };
      })(this));
      container = $('#as-container');
      if (animate) {
        container.css({
          display: 'inline-block',
          opacity: '0.0'
        });
        return container.animate({
          opacity: 1.0
        });
      } else {
        return container.css({
          display: 'inline-block',
          opacity: '1.0'
        });
      }
    };

    AdminSettings.prototype.hide = function(animate) {
      var container;
      container = $('#as-container');
      if (animate) {
        container = $('#as-container');
        return $('#as-container').fadeOut();
      } else {
        return container.css({
          display: 'none'
        });
      }
    };

    AdminSettings.prototype.inputChanged = function() {
      return this.serverSettings.inputChanged();
    };

    return AdminSettings;

  })();

  ServerSettings = (function() {
    function ServerSettings() {
      this.config = null;
      this.saveButton = $('#as-server-settings .save-button');
      this.protoPortInputs = {
        http: $('#as-http-port'),
        https: $('#as-https-port')
      };
      this.protoEnableInputs = {
        http: $('#as-http-enabled'),
        https: $('#as-https-enabled')
      };
      this.timeoutInput = $('#as-session-timeout');
      this.rewriteInput = $('#as-rewrite-host');
      this.websocketsInput = $('#as-websockets');
      this.saveButton.click((function(_this) {
        return function() {
          return _this.save();
        };
      })(this));
      this.all = $('#as-server-settings input, #as-server-settings .save-button');
    }

    ServerSettings.prototype.enable = function() {
      return this.all.css({
        opacity: '1.0',
        'pointer-events': 'auto'
      });
    };

    ServerSettings.prototype.disable = function() {
      return this.all.css({
        opacity: '0.5',
        'pointer-events': 'none'
      });
    };

    ServerSettings.prototype.save = function() {
      var aCall, proto, remaining, saveCalls, _fn, _i, _j, _len, _len1, _ref, _results;
      saveCalls = [];
      _ref = ['http', 'https'];
      _fn = (function(_this) {
        return function(proto) {
          if (_this.didProtoChange(proto)) {
            return saveCalls.push(function(cb) {
              return _this.saveProto(proto, cb);
            });
          }
        };
      })(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        proto = _ref[_i];
        _fn(proto);
      }
      if (this.didTimeoutChange) {
        saveCalls.push((function(_this) {
          return function(cb) {
            return _this.saveTimeout(cb);
          };
        })(this));
      }
      if (this.didProxyChange) {
        saveCalls.push((function(_this) {
          return function(cb) {
            return _this.saveProxy(cb);
          };
        })(this));
      }
      remaining = saveCalls.length;
      if (remaining === 0) {
        return;
      }
      this.disable();
      _results = [];
      for (_j = 0, _len1 = saveCalls.length; _j < _len1; _j++) {
        aCall = saveCalls[_j];
        _results.push(aCall((function(_this) {
          return function() {
            if (--remaining !== 0) {
              return;
            }
            _this.enable();
            return _this.inputChanged();
          };
        })(this)));
      }
      return _results;
    };

    ServerSettings.prototype.inputChanged = function() {
      if (this.didChange()) {
        return this.saveButton.css({
          'display': 'inline-block'
        });
      } else {
        return this.saveButton.css({
          'display': 'none'
        });
      }
    };

    ServerSettings.prototype.update = function(config) {
      this.config = config;
      this.protoPortInputs.http.val('' + config.http.port);
      this.protoPortInputs.https.val('' + config.https.port);
      this.protoEnableInputs.http.prop('checked', config.http.enabled);
      this.protoEnableInputs.https.prop('checked', config.https.enabled);
      this.timeoutInput.val('' + config.admin.session_timeout);
      this.rewriteInput.prop('checked', config.proxy.rewrite_host);
      this.websocketsInput.prop('checked', config.proxy.websockets);
      return this.inputChanged();
    };

    ServerSettings.prototype.didChange = function() {
      return this.didProtoChange('http') || this.didProtoChange('https') || this.didTimeoutChange() || this.didProxyChange();
    };

    ServerSettings.prototype.getProto = function(proto) {
      var enabled, port;
      enabled = this.protoEnableInputs[proto].prop('checked');
      port = parseInt(this.protoPortInputs[proto].val());
      if (isNaN(port)) {
        port = {
          'http': 80,
          'https': 443
        }[proto];
      }
      return {
        enabled: enabled,
        port: port
      };
    };

    ServerSettings.prototype.didProtoChange = function(proto) {
      var cfg, s;
      s = this.getProto(proto);
      cfg = this.config[proto];
      return s.port !== cfg.port || s.enabled !== cfg.enabled;
    };

    ServerSettings.prototype.saveProto = function(proto, cb) {
      var obj, theCb;
      obj = this.getProto(proto);
      theCb = (function(_this) {
        return function() {
          _this.config[proto] = obj;
          return cb();
        };
      })(this);
      if (proto === 'http') {
        return window.goule.api.setHttp(obj, theCb);
      } else {
        return window.goule.api.setHttps(obj, theCb);
      }
    };

    ServerSettings.prototype.getTimeout = function() {
      var num;
      num = parseInt(this.timeoutInput.val());
      if (isNaN(num)) {
        return 0;
      }
      return num;
    };

    ServerSettings.prototype.didTimeoutChange = function() {
      return this.getTimeout() !== this.config.admin.session_timeout;
    };

    ServerSettings.prototype.saveTimeout = function(cb) {
      var to;
      to = this.getTimeout();
      return window.goule.api.setSessionTimeout(to, (function(_this) {
        return function() {
          _this.config.admin.session_timeout = to;
          return cb();
        };
      })(this));
    };

    ServerSettings.prototype.getProxy = function() {
      var dict;
      dict = {
        rewrite_host: this.rewriteInput.prop('checked'),
        websockets: this.websocketsInput.prop('checked')
      };
      return dict;
    };

    ServerSettings.prototype.didProxyChange = function() {
      var cfg, s;
      s = this.getProxy();
      cfg = this.config.proxy;
      return s.websockets !== cfg.websockets || s.rewrite_host !== cfg.rewrite_host;
    };

    ServerSettings.prototype.saveProxy = function(cb) {
      var obj;
      obj = this.getProxy();
      return window.goule.api.setProxy(obj, (function(_this) {
        return function() {
          _this.config.proxy = obj;
          return cb();
        };
      })(this));
    };

    return ServerSettings;

  })();

  PasswordChanger = (function() {
    function PasswordChanger() {
      this.all = $('#as-chpass-form input');
      this.passwordInput = $('#as-new-password');
      this.confirmInput = $('#as-confirm-password');
      $('#as-chpass-form').submit((function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.submit();
        };
      })(this));
    }

    PasswordChanger.prototype.disable = function() {
      return this.all.css({
        opacity: '0.5',
        'pointer-events': 'none'
      });
    };

    PasswordChanger.prototype.enable = function() {
      return this.all.css({
        opacity: '1.0',
        'pointer-events': 'auto'
      });
    };

    PasswordChanger.prototype.submit = function() {
      var confirm, newPass;
      newPass = this.passwordInput.val();
      confirm = this.confirmInput.val();
      if (newPass !== confirm) {
        this.confirmInput.effect('shake');
        return;
      }
      this.disable();
      return window.goule.api.changePassword(newPass, (function(_this) {
        return function() {
          _this.enable();
          _this.passwordInput.val('');
          return _this.confirmInput.val('');
        };
      })(this));
    };

    return PasswordChanger;

  })();

  $(function() {
    return window.goule.adminSettings = new AdminSettings();
  });

}).call(this);
